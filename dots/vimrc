" NeoBundle
" {{{1
filetype off
filetype plugin indent off

if has('vim_starting')
    set nocompatible
    set rtp+=~/.vim/bundle/neobundle.vim
endif


call neobundle#begin()

NeoBundle 'tpope/vim-surround'
NeoBundle 'thinca/vim-partedit'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'thinca/vim-qfreplace'
NeoBundleLazy  'Shougo/unite-outline'
" NeoBundle 'kchmck/vim-coffee-script'

NeoBundle 'vim-scripts/Align'
if neobundle#tap('Align') "{{{2
    let g:Align_xstrlen = 3 " 重いらしい
    " http://d.hatena.ne.jp/gnarl/20120104/1325668347
endif "}}}2
NeoBundle 'fuenor/qfixgrep'
if neobundle#tap('qfixgrep') "{{{2
    " QuickFixウィンドウでもプレビューや絞り込みを有効化
    let QFixWin_EnableMode = 1

    " QFixHowm/QFixGrepの結果表示にロケーションリストを使用する/しない
    " let QFix_UseLocationList = 1
endif "}}}2
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
if neobundle#tap('neosnippet') "{{{2
    function! neobundle#tapped.hooks.on_source(bundle)
        let g:neosnippet#snippets_directory = '~/.vim/bundle/vimwork.vim/snippets'
        imap <C-Space> <PLUG>(neosnippet_expand_or_jump)
    endfunction
endif "}}}2
NeoBundleLazy 'Shougo/unite.vim'
if neobundle#tap('unite.vim') "{{{2
    let g:unite_enable_start_insert = 1
    nmap <leader>u [unite]
    call neobundle#config({'autoload': {'commands':[{'name': 'Unite', 'complete': 'customlist,unite#complete_source'}]}})
    nnoremap [unite]m :<c-u>Unite file_mru directory_mru
    nnoremap [unite]r :<c-u>UniteResume
endif "}}}2
NeoBundle 'mattn/emmet-vim'
if neobundle#tap('emmet-vim') "{{{2
    " let g:user_emmet_leader_key='<C-Z>'
    let g:user_emmet_settings = { 
                \ 'variables': { 
                \ 'lang' : 'ja' 
                \ } 
                \ }
    call neobundle#config({'autoload': {
                \ 'filetypes': ['html','css','php'],
                \ }})
    function! neobundle#tapped.hooks.on_source(bundle)
        imap <expr><TAB> 
        \ emmet#isExpandable()? emmet#expandAbbrIntelligent("\<tab>")
        \ :"\<TAB>"
    endfunction
endif "}}}2

call neobundle#end()
filetype plugin indent on
" }}}1

" Map
" {{{1
nnoremap <leader>fp<CR> :<C-u>let @+ = expand("%:p")\|echo @+<CR>|"
nnoremap <leader>ft<CR> :<C-u>let @+ = expand("%:t")\|echo @+<CR>|"
nnoremap <S-Space> za|"
nnoremap <ESC><ESC> :<C-u>noh<CR><ESC>|" 
nnoremap <C-n> :<C-u>cn<CR>|"
nnoremap <C-p> :<C-u>cN<CR>|"
nnoremap <C-j> j.|"
nnoremap <C-k> n.|"
nnoremap * :<C-u>set hls<CR>:let @/ = '\<'.expand("<cword>").'\>'\|echo @/<CR>|"
nnoremap + :<C-u>AddSearch <C-r>=expand("<cword>")<CR><CR>:echo @/<CR>|"
vnoremap < <gv|"
vnoremap > >gv|"
nnoremap go yypC
nnoremap gO yyPC
" }}}1

so $VIMRUNTIME/macros/matchit.vim

" command 
" {{{1
let g:plugin_cmdex_disable = 1
cnoremap <C-X> <C-R>=<SID>GetBufferDirectory()<CR>
function! s:GetBufferDirectory()
    let dir = expand('%:p:h')
    return dir . (exists('+shellslash') && !&shellslash ? '\' : '/')
endfunction

nnoremap <C-s> 	 :<C-u>SetNum<CR>|"
command! -narg=0 SetNum call <SID>set_num() 
function! s:set_num() "{{{
" ********************************************************************************
" 連番の作成
" カーソル以降の数字を、前の数字にひとつ加算したものにする ( マイナスは、考慮しない ) 
" ********************************************************************************
"
  " カーソル位置の取得
  let pos = getpos(".")
  let lnum = pos[1]
  let col  = pos[2] - 1

  "=====================
  " 前の行
  "=====================
  let lstr = getline(lnum-1)

  " 数字の取得
  let nums = split(lstr, '\D\+') + [1]

  "=====================
  " 現在の行
  "=====================
  let lstr  = getline(lnum)

  "================================================================================
  " 数字の末尾で分割
  "--------------------------------------------------------------------------------
  " 1 : aaa12(3)4aaaa  : () カーソル位置
  " 2 : aaa1234 , aaaa : カーソルより後ろの数字の末尾で分割
  " 3 : aaa     , aaa  : 数字の削除
  "================================================================================
  let col = match(lstr, '\d\D\|\d$', col) + 1

  " カーソル後に数字がある場合は処理する
  if col > 0
    " 数字の前の文字の取得
    let head = strpart(lstr, 0, col)

    " 数字の数を抽出
    let head_ncnt = len(split(head, '\D\+')) - 1

    " 文の取得
    " 変更する部分の数字は削除する
    let str = [
          \ substitute(head, '\d\+$','',''),
          \ get(nums, head_ncnt, 0) + 1,
          \ strpart(lstr, col ),
          \ ]

    " 書き込み
    call setline(lnum, join(str,''))

    " カーソル移動
    call cursor(lnum, len(str[0].str[1]))
  endif

endfunction
"}}}
"
command! -narg=* AddSearch call <SID>addSearch(<f-args>) 
function! s:addSearch(...) "{{{
    if a:0 > 0
        let @/ = @/.'\|\<'.join(a:000,'\>\|\<').'\>'
    endif
endfunction
"}}}
" }}}1

" set 
" {{{1
set ve=block
set nowrap
set noswapfile
set number
set fdm=marker
set tabstop=4
set shiftwidth=4
set expandtab
set list lcs=tab:`\ 
" }}}1

" set - lines 
" {{{1
set backupdir=~/.vim/bak
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir))
endif

if has('persistent_undo')
    set noudf
    set undodir=~/.vim/undo
    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir))
    endif
endif 
" }}}1

